


#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>
#include <opencv2/opencv.hpp>
#include "cuda.h"

typedef struct PixelMemory
{
	int x;
	int y;
};

int w, h;
int** isCopy;
int pm_cnt = 0;
int maxX, minY;
IplImage* src;
IplImage* srcv;
IplImage* msk;
CvPoint st, ed,pos;
__device__ CvPoint pos_gpu;
__device__ CvScalar** VX_gpu, ** X_gpu;
PixelMemory* pm;
IplImage* dst, * dstO;
CvScalar white = cvScalar(255, 255, 255);
CvScalar** X, ** VX;

void makePixelmemory()
{
	for (int y = 0; y < h; y++)
		for (int x = 0; x < w; x++)
		{
			CvScalar f = cvGet2D(src, y, x);
			if (f.val[0] == 255 && f.val[1] == 255 && f.val[2] == 0)
			{
				pm[pm_cnt].y = y;
				pm[pm_cnt].x = x;
				pm_cnt++;
			}
		}
}

void makeMask()
{
	for (int y = 0; y < h; y++)
		for (int x = 0; x < w; x++)
		{
			CvScalar f = cvGet2D(src, y, x);
			if (f.val[0] == 255 && f.val[1] == 255 && f.val[2] == 0)
			{
				cvSet2D(msk, y, x, cvScalar(255, 255, 255));
			}
			else
				cvSet2D(msk, y, x, cvScalar(0, 0, 0));
		}

}
void attatchSrc(int x, int y)
{
	for (int i = 0; i < pm_cnt; i++)
	{
		CvScalar f = cvGet2D(srcv, pm[i].y, pm[i].x);

		cvSet2D(dst, pm[i].y + y, pm[i].x + x, f);
		isCopy[pm[i].y + y][pm[i].x + x] = 0;

	}
}


bool isWhite(CvScalar f)
{
	if (f.val[0] == white.val[0] && f.val[1] == white.val[1] && f.val[2] == white.val[2])
		return true;
	return false;
}

void initColor() //cvScalar 배열 만들기 
{
	
	X = (CvScalar**)malloc(sizeof(CvScalar*) * dstO->height);
	for (int i = 0; i < dst->height; i++)
		X[i] = (CvScalar*)malloc(sizeof(CvScalar) * dstO->width);

	VX = (CvScalar**)malloc(sizeof(CvScalar*) * h);
	for (int i = 0; i < h; i++)
		VX[i] = (CvScalar*)malloc(sizeof(CvScalar) * w);

	for (int y = 0; y < dstO->height; y++)
	{
		for (int x = 0; x < dstO->width; x++)
		{
			CvScalar f = cvGet2D(dstO, y, x);
			X[y][x] = f;
		}
	}

	for (int y = 0; y < h; y++)
	{
		for (int x = 0; x < w; x++)
		{
			CvScalar f = cvGet2D(srcv, y, x);
			VX[y][x] = f;
		}
	}

	 cudaMalloc((CvScalar**)&X_gpu, sizeof(CvScalar*) * dstO->width * dstO->height);
	 cudaMalloc((CvScalar**)&VX_gpu, sizeof(CvScalar*) * w * h);

	 X_gpu = X;
	 VX_gpu = VX;


}


__global__
void poissonEditing_even(CvScalar** gpu_dst, int W, int H)
{

	//int tCol = blockDim.x * blockIdx.x + threadIdx.x;
	//int tRow = blockDim.y * blockIdx.y + threadIdx.y;

	int x = blockIdx.x;
	int y = blockIdx.y;

	if (x >= W || y >= H)
		return;

	if (x % 2 == 0)
	{
		CvScalar F;
		CvScalar f1 = X_gpu[y][x - 1];
		CvScalar f2 = X_gpu[y][x + 1];
		CvScalar f3 = X_gpu[y - 1][x];
		CvScalar f4 = X_gpu[y + 1][x];

		CvScalar v = VX_gpu[y - pos_gpu.y][x - pos_gpu.x];
		CvScalar v1 = VX_gpu[y - pos_gpu.y][x - pos_gpu.x - 1];
		CvScalar v2 = VX_gpu[y - pos_gpu.y][x - pos_gpu.x + 1];
		CvScalar v3 = VX_gpu[y - pos_gpu.y - 1][x - pos_gpu.x];
		CvScalar v4 = VX_gpu[y - pos_gpu.y + 1][x - pos_gpu.x];


		for (int i = 0; i < 3; i++)
		{
			F.val[i] = ((f1.val[i] + f2.val[i] + f3.val[i] + f4.val[i]) - (v1.val[i] + v2.val[i] + v3.val[i] + v4.val[i])) / 4 + v.val[i];
		}

		gpu_dst[y][x] = F;
	}
}

__global__
void poissonEditing_odd(CvScalar** gpu_dst, int W, int H)
{

	int x = blockIdx.x;
	int y = blockIdx.y;

	if (x >= W || y >= H)
		return;

	if (x % 2 != 0)
	{
		CvScalar F;
		CvScalar f1 = X_gpu[y][x - 1];
		CvScalar f2 = X_gpu[y][x + 1];
		CvScalar f3 = X_gpu[y - 1][x];
		CvScalar f4 = X_gpu[y + 1][x];

		CvScalar v = VX_gpu[y - pos_gpu.y][x - pos_gpu.x];
		CvScalar v1 = VX_gpu[y - pos_gpu.y][x - pos_gpu.x - 1];
		CvScalar v2 = VX_gpu[y - pos_gpu.y][x - pos_gpu.x + 1];
		CvScalar v3 = VX_gpu[y - pos_gpu.y - 1][x - pos_gpu.x];
		CvScalar v4 = VX_gpu[y - pos_gpu.y + 1][x - pos_gpu.x];


		for (int i = 0; i < 3; i++)
		{
			F.val[i] = ((f1.val[i] + f2.val[i] + f3.val[i] + f4.val[i]) - (v1.val[i] + v2.val[i] + v3.val[i] + v4.val[i])) / 4 + v.val[i];
		}

		gpu_dst[y][x] = F;
		//gpu_dst[tRow][tCol] = getColor(tRow, tCol);
	}
}

void poissonEditing()
{
	int W = dst->width;
	int H = dst->height;

	CvScalar** gpu_dst;
	CvScalar** host_dst;

	cudaMalloc((CvScalar**)&gpu_dst, sizeof(CvScalar*) * W * H);

	//dim3 thread(32, 4);
	dim3 grid(W, H);

	poissonEditing_even << < grid, 1 >> > (gpu_dst, W, H);

	poissonEditing_odd << <grid, 1 >> > (gpu_dst, W, H);

	cudaMemcpy(host_dst, gpu_dst, W * H * sizeof(CvScalar*), cudaMemcpyDeviceToHost);
	


	for (int y = 0; y < H; y++)
	{
		for (int x = 0; x < W; x++)
		{
			if (isCopy[y][x] == 0)		//dst 위에 복사된 영역일때
			{
				cvSet2D(dst, y, x, host_dst[y][x]);
			}
		}
		cvShowImage("dst", dst);
		cvWaitKey(1);
	}

	/*
	int cnt = 0;
	while (cnt < 1000)	//오차 계산 잊지말기..
	{
		for (int y = pos.y; y < H; y++)
		{
			for (int x = pos.x; x < W; x++)
			{
				if (isCopy[y][x] == 0)		//dst 위에 복사된 영역일때
				{
					cvSet2D(dst, y, x, getColor(x, y));
				}
			}
			cvShowImage("dst", dst);
			cvWaitKey(1);
		}
		cnt++;
	}
	*/

	cudaFree(gpu_dst);
}

void myMouse(int event, int x, int y, int flags, void* param)
{
	if (event == CV_EVENT_LBUTTONDOWN)
		st = cvPoint(x, y);

	if (event == CV_EVENT_MOUSEMOVE && flags == CV_EVENT_FLAG_LBUTTON)
	{
		ed = cvPoint(x, y);
		CvScalar color = cvScalar(255, 255, 0);
		cvLine(src, st, ed, color, 20);
		cvShowImage("src", src);
		st = ed;
	}

	if (event == CV_EVENT_LBUTTONUP)
	{
		makePixelmemory();
		initColor();
		makeMask();
		cvShowImage("src", src);
		cvShowImage("msk", msk);
	}
}

void myMouse2(int event, int x, int y, int flags, void* param)
{
	if (event == CV_EVENT_LBUTTONDOWN)
		pos = cvPoint(x, y);

	if (event == CV_EVENT_LBUTTONUP)
	{
		attatchSrc(pos.x, pos.y);

		//cudaMemcpy(pos_gpu, pos,  sizeof(CvPoint), cudaMemcpyHostToDevice);
		pos_gpu = pos;
		cvShowImage("dst", dst);


		poissonEditing();
	}
}

int main()
{
	dst = cvLoadImage("c:\\temp\\sky.png");
	dstO = cvLoadImage("c:\\temp\\sky.png");
	src = cvLoadImage("c:\\temp\\PIEsource.jpg");
	srcv = cvLoadImage("c:\\temp\\PIEsource.jpg");

	w = src->width;
	h = src->height;
	msk = cvCreateImage(cvSize(w, h), 8, 3);

	cvShowImage("src", src);
	cvShowImage("dst", dst);
	pm = (PixelMemory*)malloc(sizeof(PixelMemory) * (w * h));

	isCopy = (int**)malloc(sizeof(int*) * (dst->height));

	for (int i = 0; i < dst->height; i++) {
		isCopy[i] = (int*)malloc(sizeof(int) * (dst->width));
	}

	for (int y = 0; y < dst->height; y++)
		for (int x = 0; x < dst->width; x++)
			isCopy[y][x] = -1;

	cvSetMouseCallback("src", myMouse);
	cvSetMouseCallback("dst", myMouse2);

	cvWaitKey();

	return 0;
}
